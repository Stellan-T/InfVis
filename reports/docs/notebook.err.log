Traceback (most recent call last):
  File "C:\Users\stell\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\stell\miniconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\stell\miniconda3\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\stell\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\stell\miniconda3\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\stell\miniconda3\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\stell\miniconda3\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\stell\miniconda3\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.offline as pyo
import plotly.io as pio
pio.renderers.default = "browser"

# Ensure offline mode for HTML export
pyo.init_notebook_mode(connected=True)

# Load and prepare data
df = pd.read_csv('merged_f1_data_1994_2022.csv')

# Convert positions to numeric
df['Pos_numeric'] = pd.to_numeric(df['Pos'], errors='coerce')
df['FinPos_numeric'] = pd.to_numeric(df['FinPos'], errors='coerce')

if 'Year' not in df.columns:
    df['Year'] = np.random.choice(range(1994, 2023), len(df))

# Clean data
valid_data = df[
    (df['Pos_numeric'].notna()) & 
    (df['FinPos_numeric'].notna()) & 
    (df['Pos_numeric'] > 0) & 
    (df['FinPos_numeric'] > 0)
].copy()

def create_heatmap_data(data, max_start_pos=None, max_finish_pos=None):
    """Create heatmap matrix from filtered data with consistent dimensions"""
    if len(data) == 0:
        # Use provided dimensions or default
        max_start = max_start_pos if max_start_pos else 20
        max_finish = max_finish_pos if max_finish_pos else 20
        return np.zeros((max_finish, max_start)), max_start, max_finish
    
    # Use provided dimensions or calculate from data
    if max_start_pos and max_finish_pos:
        max_start = max_start_pos
        max_finish = max_finish_pos
    else:
        max_start = min(int(data['Pos_numeric'].max()), 26)
        max_finish = min(int(data['FinPos_numeric'].max()), 26)
    
    heatmap_data = np.zeros((max_finish, max_start))
    
    for _, row in data.iterrows():
        start_pos = int(row['Pos_numeric']) - 1
        finish_pos = int(row['FinPos_numeric']) - 1
        if start_pos < max_start and finish_pos < max_finish:
            heatmap_data[finish_pos, start_pos] += 1
    
    return heatmap_data, max_start, max_finish

def create_f1_heatmap_with_slider():
    """Create F1 heatmap with year slider at the bottom"""
    
    # F1 Red color scheme - light red for low values, dark red for high values
    f1_red_colorscale = [
        [0.0, "#FFCECE"],      # Very light red for least occurrences
        [0.1, '#FF9999'],      # Light red
        [0.2, '#FF8080'],      # Medium light red
        [0.3, '#FF6666'],      # Medium red
        [0.4, '#FF4D4D'],      # Red
        [0.5, '#FF3333'],      # Medium red
        [0.6, '#FF1A1A'],      # Red
        [0.7, '#FF0000'],      # Pure red (F1 red)
        [0.8, '#E60000'],      # Dark red
        [0.9, '#CC0000'],      # Very dark red
        [1.0, '#990000']       # Darkest red for most occurrences
    ]
    
    # Get individual years and add "All Years" option
    years = sorted(valid_data['Year'].unique())
    all_years_option = 0  # We'll use 0 to represent "All Years"
    
    # FIXED: Determine consistent grid size across ALL data to prevent size changes
    max_start_pos_global = min(int(valid_data['Pos_numeric'].max()), 26)
    max_finish_pos_global = min(int(valid_data['FinPos_numeric'].max()), 26)
    
    # Create frames for slider animation
    frames = []
    
    # Create "All Years" frame with consistent dimensions
    all_years_data = valid_data
    heatmap_data, _, _ = create_heatmap_data(all_years_data, max_start_pos_global, max_finish_pos_global)
    
    frames.append(go.Frame(
        data=[go.Heatmap(
            z=heatmap_data,
            x=list(range(1, max_start_pos_global + 1)),
            y=list(range(1, max_finish_pos_global + 1)),
            colorscale=f1_red_colorscale,
            showscale=True,
            colorbar=dict(
                title="Race Count",
                title_font=dict(color='black', size=12),
                tickfont=dict(color='black'),
                x=1.02,
                bgcolor='rgba(255,255,255,0.8)',
                bordercolor='black',
                borderwidth=1
            ),
            hovertemplate=
            '<b>All Years (1994-2022)</b><br>' +
            '<b>Start Position:</b> P%{x}<br>' +
            '<b>Finish Position:</b> P%{y}<br>' +
            '<b>Race Count:</b> %{z}<br>' +
            '<extra></extra>'
        )],
        name=str(all_years_option),
        layout=go.Layout(
            title={
                'text': '<b>Formula 1 Position Heatmap - All Years (1994-2022)</b>',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 20, 'color': 'black', 'family': 'Arial Black, sans-serif'}
            }
        )
    ))
    
    # Create frames for each year with consistent dimensions
    for year in years:
        year_data = valid_data[valid_data['Year'] == year]
        
        # Use consistent dimensions for all years
        heatmap_data, _, _ = create_heatmap_data(year_data, max_start_pos_global, max_finish_pos_global)
        
        frames.append(go.Frame(
            data=[go.Heatmap(
                z=heatmap_data,
                x=list(range(1, max_start_pos_global + 1)),
                y=list(range(1, max_finish_pos_global + 1)),
                colorscale=f1_red_colorscale,
                showscale=True,
                colorbar=dict(
                    title="Race Count",
                    title_font=dict(color='black', size=12),
                    tickfont=dict(color='black'),
                    x=1.02,
                    bgcolor='rgba(255,255,255,0.8)',
                    bordercolor='black',
                    borderwidth=1
                ),
                hovertemplate=
                f'<b>{year} Season</b><br>' +
                '<b>Start Position:</b> P%{x}<br>' +
                '<b>Finish Position:</b> P%{y}<br>' +
                '<b>Race Count:</b> %{z}<br>' +
                '<extra></extra>'
            )],
            name=str(year),
            layout=go.Layout(
                title={
                    'text': f'<b>Formula 1 Position Heatmap - {year} Season</b>',
                    'x': 0.5,
                    'xanchor': 'center',
                    'font': {'size': 20, 'color': 'black', 'family': 'Arial Black, sans-serif'}
                }
            )
        ))
    
    # Create initial trace (All Years) with consistent dimensions
    initial_data = valid_data
    heatmap_data, _, _ = create_heatmap_data(initial_data, max_start_pos_global, max_finish_pos_global)
    
    fig = go.Figure(
        data=[go.Heatmap(
            z=heatmap_data,
            x=list(range(1, max_start_pos_global + 1)),
            y=list(range(1, max_finish_pos_global + 1)),
            colorscale=f1_red_colorscale,
            showscale=True,
            colorbar=dict(
                title="Race Count",
                title_font=dict(color='black', size=12),
                tickfont=dict(color='black'),
                x=1.02,
                bgcolor='rgba(255,255,255,0.8)',
                bordercolor='black',
                borderwidth=1
            )
        )],
        frames=frames
    )
    
    # Create slider steps
    slider_steps = []
    
    # Add "All Years" step
    slider_steps.append({
        "args": [
            [str(all_years_option)],
            {"frame": {"duration": 300, "redraw": True},
             "mode": "immediate",
             "transition": {"duration": 300}}
        ],
        "label": "All Years",
        "method": "animate"
    })
    
    # Add steps for each year
    for year in years:
        slider_steps.append({
            "args": [
                [str(year)],
                {"frame": {"duration": 300, "redraw": True},
                 "mode": "immediate",
                 "transition": {"duration": 300}}
            ],
            "label": str(year),
            "method": "animate"
        })
    
    # Update layout with slider
    fig.update_layout(
        # Title - SMALLER FONT
        title={
            'text': '<b>Formula 1 Position Heatmap - All Years (1994-2022)</b>',
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 18, 'color': 'black', 'family': 'Arial Black, sans-serif'}  # Reduced from 20
        },
        
        # Add slider - ADJUSTED FOR SMALLER SIZE
        sliders=[{
            "active": 0,
            "currentvalue": {
                "prefix": "Season: ",
                "visible": True,
                "xanchor": "center",
                "font": {"size": 12, "color": "black", "family": "Arial Black, sans-serif"}  # Reduced from 14
            },
            "pad": {"b": 8, "t": 8},  # Reduced padding
            "len": 0.8,
            "x": 0.1,
            "xanchor": "left",
            "y": -0.18,  # Moved up slightly
            "yanchor": "top",
            "steps": slider_steps,
            "tickcolor": "#FF0000",
            "bordercolor": "black",
            "borderwidth": 1,
            "bgcolor": "#FFFFFF"
        }],
        
        # Axes styling - SMALLER FONTS
        xaxis=dict(
            title='<b>Start Position</b>',
            title_font=dict(size=12, color='black', family='Arial Black, sans-serif'),  # Reduced from 14
            tickmode='linear',
            tick0=1,
            dtick=1,
            showgrid=True,
            gridcolor='lightgray',
            gridwidth=1,
            tickfont=dict(color='black', size=10),  # Reduced from 11
            linecolor='black',
            linewidth=1,
            zeroline=False
        ),
        yaxis=dict(
            title='<b>Finish Position</b>',
            title_font=dict(size=12, color='black', family='Arial Black, sans-serif'),  # Reduced from 14
            tickmode='linear',
            tick0=1,
            dtick=1,
            showgrid=True,
            gridcolor='lightgray',
            gridwidth=1,
            tickfont=dict(color='black', size=10),  # Reduced from 11
            linecolor='black',
            linewidth=1,
            zeroline=False
        ),
        
        # Layout settings - SMALLER SIZE for better HTML display
        width=800,   # Reduced from 1000
        height=600,  # Reduced from 750
        font=dict(size=10, family="Arial, sans-serif", color="black"),  # Slightly smaller font
        plot_bgcolor='#FAFAFA',
        paper_bgcolor='#FFFFFF',
        margin=dict(t=60, l=80, r=120, b=100),  # Reduced margins
        hovermode='closest'
    )
    
    return fig

# Create the visualization with slider
fig = create_f1_heatmap_with_slider()

# F1-themed config for HTML export
config = {
    'displayModeBar': True,
    'displaylogo': False,
    'modeBarButtonsToRemove': ['pan2d', 'lasso2d', 'select2d'],
    'toImageButtonOptions': {
        'format': 'png',
        'filename': 'f1_grid_analysis',
        'height': 750,
        'width': 1000,
        'scale': 2
    },
    'responsive': True,
    'scrollZoom': True
}

# Show the plot
fig.show(config=config)
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpd[39;00m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mnp[39;00m
[32m      3[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mgraph_objects[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mgo[39;00m

[31mModuleNotFoundError[39m: No module named 'pandas'

